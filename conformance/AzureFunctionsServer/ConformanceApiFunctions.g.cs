// DO NOT EDIT: generated by fsdgenazfunc
using Facility.AzureFunctions;
using Facility.ConformanceApi.Http;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;

#pragma warning disable 1591 // missing XML comment

namespace AzureFunctionsServer
{
	[System.CodeDom.Compiler.GeneratedCode("fsdgenazfunc", "")]
	public static class ConformanceApiFunctions
	{
		[Function("getApiInfo")]
		// Azure Functions cannot currently route to "", so we add the "optional" regex below.
		public static Task<HttpResponseData> GetApiInfoAsync([HttpTrigger("GET", Route = "{_:regex(,)?}")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleGetApiInfoAsync);

		[Function("getWidgets")]
		public static Task<HttpResponseData> GetWidgetsAsync([HttpTrigger("GET", Route = "widgets")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleGetWidgetsAsync);

		[Function("createWidget")]
		public static Task<HttpResponseData> CreateWidgetAsync([HttpTrigger("POST", Route = "widgets")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleCreateWidgetAsync);

		[Function("getWidget")]
		public static Task<HttpResponseData> GetWidgetAsync([HttpTrigger("GET", Route = "widgets/{id}")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleGetWidgetAsync);

		[Function("deleteWidget")]
		public static Task<HttpResponseData> DeleteWidgetAsync([HttpTrigger("DELETE", Route = "widgets/{id}")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleDeleteWidgetAsync);

		[Function("getWidgetBatch")]
		public static Task<HttpResponseData> GetWidgetBatchAsync([HttpTrigger("POST", Route = "widgets/get")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleGetWidgetBatchAsync);

		[Function("mirrorFields")]
		public static Task<HttpResponseData> MirrorFieldsAsync([HttpTrigger("POST", Route = "mirrorFields")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleMirrorFieldsAsync);

		[Function("checkQuery")]
		public static Task<HttpResponseData> CheckQueryAsync([HttpTrigger("GET", Route = "checkQuery")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleCheckQueryAsync);

		[Function("checkPath")]
		public static Task<HttpResponseData> CheckPathAsync([HttpTrigger("GET", Route = "checkPath/{string}/{boolean}/{double}/{int32}/{int64}/{decimal}/{enum}")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleCheckPathAsync);

		[Function("mirrorHeaders")]
		public static Task<HttpResponseData> MirrorHeadersAsync([HttpTrigger("GET", Route = "mirrorHeaders")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleMirrorHeadersAsync);

		[Function("mixed")]
		public static Task<HttpResponseData> MixedAsync([HttpTrigger("POST", Route = "mixed/{path}")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleMixedAsync);

		[Function("required")]
		public static Task<HttpResponseData> RequiredAsync([HttpTrigger("POST", Route = "required")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleRequiredAsync);

		[Function("mirrorBytes")]
		public static Task<HttpResponseData> MirrorBytesAsync([HttpTrigger("POST", Route = "mirrorBytes")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleMirrorBytesAsync);

		[Function("mirrorText")]
		public static Task<HttpResponseData> MirrorTextAsync([HttpTrigger("POST", Route = "mirrorText")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleMirrorTextAsync);

		[Function("bodyTypes")]
		public static Task<HttpResponseData> BodyTypesAsync([HttpTrigger("POST", Route = "bodyTypes")] HttpRequestData request) =>
			FacilityAzureFunctionsUtility.HandleHttpRequestAsync<ConformanceApiHttpHandler>(request, x => x.TryHandleBodyTypesAsync);
	}
}
